var Stream = require('stream')
var assert = require('assert')

function FakeStream () {
  this.readable = true
  this.isTTY = true
}

FakeStream.prototype = new Stream()

var f = new FakeStream()

var keys = require('..')(f)

function nameKey(key) {

  var name = [], n = key.name
  if(key.shift) name.push('Shift')
  if(key.ctrl) name.push('Ctrl')
  if(key.meta) name.push('Meta')
  if(n.length > 1)
    n = n[0].toUpperCase() + n.substring(1)
  name.push(key.name)
  return name.join('-')
}

function parseName (name) {

  var key = {
    meta: false, ctrl: false, shift: false
  }
  name.split('-').forEach(function (e) {
    e = e.toLowerCase()
    if(/meta|shift|ctrl/.test(e))
      key[e] = true
    else key.name = e
  })
  return key
}

function assertKey(seq, name, CH) {
  var emitted = false
  var expect = parseName(name)
  console.error(name, JSON.stringify(seq))
  try {
    f.once('keypress', function (ch, key) {
      emitted = true
      console.error(key)
      for(var k in expect)
        assert.equal(key[k], expect[k], 'key.'+k+' *must* == '+expect[k]+', got:'+key[k])
      //if('undefined' !== typeof CH)
        //assert.equal(ch, CH)
    })
    f.emit('data', seq)
    assert.ok(emitted, 'keypress must be emittexed')
  } catch (err) {
//    throw err
    return console.log('NOT OK', err.message,'\n')
  }
  console.log('OK!\n')
  
}

var k = assertKey
// this is better than putting each key in an object and iterate over it
// because the stacktraces point to the exact line that failed.

k(' '            , 'space', ' ')

k('k'            , 'k', 'k')

k('o'            , 'o', 'o')
k('O'            , 'Shift-O', 'O')

k('\u000f'       , 'Ctrl-O', 'o')
k('\u001bo'      , 'Meta-O', 'o' )

k('\u001b\u000f' , 'Ctrl-Meta-O', 'o')

//k('\u001b\u000f' , 'Ctrl-Meta-Shift-O', 'O')
//SO DISAPOINTED THAT IT SEEMS TERMINAL CAN'T do Ctrl-Shift-Meta!
//hmm... I _could_ use this, but i'd have to remap it from X11.


